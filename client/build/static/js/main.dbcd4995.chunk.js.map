{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","console","log","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbcd4995.chunk.js","sourcesContent":["import React, {Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\n\nclass AppNavbar extends Component {\n    state = {\n        isOpen: false\n    }\n    // constructor(props){\n    //     super(props);\n    //     this.toggle = this.toogle.bind(this);\n    //     this.state = {\n    //         isOpen :false\n    //     }\n    // }\n    toggle = ()=>{\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n\n    }\n    render(){\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                <Container>\n                    <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/teichbauer\">\n                                    Github\n                                </NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Container>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default AppNavbar;","import axios from 'axios';\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\n\nexport const getItems = () => dispatch => {\n    dispatch(setItemsLoading());\n    axios\n        .get('/api/items')\n        .then(res => dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n}\n\nexport const addItem = (item) => dispatch => {\n    axios\n    .post('/api/items', item)\n    .then(res =>\n        dispatch({\n            type: ADD_ITEM,\n            payload: res.data\n        })\n    )\n\n}\nexport const deleteItem = (id) => dispatch => {\n    axios.delete(`api/items/${id}`)\n        .then(res =>\n            dispatch({\n                type: DELETE_ITEM,\n                payload: id\n            })\n        )\n}\n\n\n\n\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING\n    }\n}\n","export const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\n","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n    componentDidMount(){\n        console.log('componentDidMount');\n        this.props.getItems();\n        // console.log(\"@@@@@ HELLO @@@@\")\n    }\n\n    onDeleteClick = (id) => {\n        this.props.deleteItem(id);\n    }\n\n    render(){\n        const { items } = this.props.item;\n        return (\n            <Container>\n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items.map(({_id, name}) => (\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem>\n                                    <Button className=\"remove-btn\"\n                                        color=\"danger\"\n                                        size=\"sm\"\n                                        onClick = {this.onDeleteClick.bind(this, _id)}>\n                                        &times;\n                                    </Button>\n                                    {name}\n                                </ListGroupItem>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n        );\n    } // end of render(){\n} // end of class ShoppingList\n\n// This is for the purpose of validation of ShoppingList's props\nShoppingList.propTypes = {\n    // getItems is from actions/itemActions, which ia mapped to\n    // ShoppingList as a prop\n    getItems: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n\n/**\n * connect accepts four different parameters, all optional. By convention,\n * they are called:\n *  mapStateToProps?: Function\n *  mapDispatchToProps?: Function | Object\n *  mergeProps?: Function\n *  options?: Object\n *-------------------------------------------\n * the 2nd parm of connect is mapDispatchToProps, and this\n * mapDispatchToProps can be an object or a function returning an object\n * each field of this object should be a function, returning a object\n * that is an \"action\" which is an object with action.type, and optionally,\n * action.payload\n */\n\nexport default connect(\n    mapStateToProps,\n    { getItems, deleteItem }\n)(ShoppingList)","import React, { Component } from 'react';\n// import uuid from 'react-uuid';\n\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\n\nclass ItemModal extends Component {\n    state = {\n        modal: false,\n        name: ''\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    onChange =(e) => {\n        /** js is different in this as in Python\n         * d={xx:11}\n         * >{ xx: 11 }\n         * key=\"we\"\n         * d1={[key]:22}\n         * d1\n         * { we: 22 }\n         * ------------\n         * Python would not accept xx - it would be not-defined.\n         * But js will see xx as a string 'xx'. If I want to use it the Python\n         * way, I have to use [key]:22 as in above.\n         * That's why the following usage of [e.target.name]\n         */\n        this.setState({[e.target.name]: e.target.value});\n        // console.log(\"this.state: \",this.state);\n    }\n\n    onSubmit = (e) => {\n        // since it is a form, block it to not submit automatically by def.\n        e.preventDefault();\n        const newItem = {\n            name: this.state.name\n        }\n        // the action addItem from itemActions has been mapped as a prop\n        // so here we use it/call it under props.*\n        this.props.addItem(newItem);\n        // Close\n        this.toggle();\n    }\n    render() {\n        return(\n            <div>\n                <Button\n                    color=\"dark\"\n                    style={{marginBottom: '2rem'}}\n                    onClick={this.toggle}\n                >Add Item</Button>\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>\n                        Add To Shopping List\n                    </ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"item\">Item</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"item\"\n                                    placeholder=\"Add shopping item\"\n                                    onChange={this.onChange}\n                                />\n                                <Button\n                                    color=\"secondary\"\n                                    style={{marginTop: '2rem'}}\n                                    block\n                                >Add Item</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n/**\n * connect accepts four different parameters, all optional. By convention,\n * they are called:\n *  mapStateToProps?: Function\n *  mapDispatchToProps?: Function | Object\n *  mergeProps?: Function\n *  options?: Object\n *-------------------------------------------\n * the 2nd parm of connect is mapDispatchToProps, and this\n * mapDispatchToProps can be an object or a function returning an object\n * each field of this object should be a function, returning a object\n * that is an \"action\" which is an object with action.type, and optionally,\n * action.payload\n */\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\n\nconst initialState = {\n    items: [],\n    loading: false\n}\n\n/**\n * anonymouse function export. The importer as name whatever he like.\n * ------\n * in js, d0 = { items:[11,22,33]}\n * 1. d1 = {...d0}  //d1 == { items:[11,22,33]}, and\n * 2. the last same-key overwrite the prev key-value pair:\n *    d3 = { it2: ['hello'], it2: [22,33,44]} // d3=={ it2:[22,33,44]}\n * So, using 1. and 2.:\n * d4 = {...d0, items:[100,400]}  d4 == { items[100,400]}\n * This what is happening in DELETE_ITEM and ADD_ITEM's return value\n * --------------------\n * Reducer function returns a state, or modified new state\n */\nexport default function(state=initialState, action){\n    switch (action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            };\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [action.payload, ...state.items]\n            };\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n\n        default:\n            return state;\n    }\n}","// offer rootReducer\nimport { combineReducers } from 'redux';\n// in file itemReducer.js, an anonymous function has been exported\n// here we can call it any name\nimport itemReducer55 from './itemReducer';\n\nexport default combineReducers({\n    item: itemReducer55\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'; // using a file index.js\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\nimport { Container } from 'reactstrap';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}